// source: proto/driver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.ArrayValue', null, global);
goog.exportSymbol('proto.proto.ByteStream', null, global);
goog.exportSymbol('proto.proto.ByteStreamRequest', null, global);
goog.exportSymbol('proto.proto.Directive', null, global);
goog.exportSymbol('proto.proto.Error', null, global);
goog.exportSymbol('proto.proto.FieldResolveInfo', null, global);
goog.exportSymbol('proto.proto.FieldResolveRequest', null, global);
goog.exportSymbol('proto.proto.FieldResolveResponse', null, global);
goog.exportSymbol('proto.proto.FragmentDefinition', null, global);
goog.exportSymbol('proto.proto.Function', null, global);
goog.exportSymbol('proto.proto.InterfaceResolveTypeInfo', null, global);
goog.exportSymbol('proto.proto.InterfaceResolveTypeRequest', null, global);
goog.exportSymbol('proto.proto.InterfaceResolveTypeResponse', null, global);
goog.exportSymbol('proto.proto.ObjectValue', null, global);
goog.exportSymbol('proto.proto.OperationDefinition', null, global);
goog.exportSymbol('proto.proto.ResponsePath', null, global);
goog.exportSymbol('proto.proto.ScalarParseRequest', null, global);
goog.exportSymbol('proto.proto.ScalarParseResponse', null, global);
goog.exportSymbol('proto.proto.ScalarSerializeRequest', null, global);
goog.exportSymbol('proto.proto.ScalarSerializeResponse', null, global);
goog.exportSymbol('proto.proto.Secret', null, global);
goog.exportSymbol('proto.proto.Selection', null, global);
goog.exportSymbol('proto.proto.SetSecretsRequest', null, global);
goog.exportSymbol('proto.proto.SetSecretsResponse', null, global);
goog.exportSymbol('proto.proto.StreamInfo', null, global);
goog.exportSymbol('proto.proto.StreamMessage', null, global);
goog.exportSymbol('proto.proto.StreamRequest', null, global);
goog.exportSymbol('proto.proto.SubscriptionConnectionRequest', null, global);
goog.exportSymbol('proto.proto.SubscriptionConnectionResponse', null, global);
goog.exportSymbol('proto.proto.SubscriptionListenMessage', null, global);
goog.exportSymbol('proto.proto.SubscriptionListenRequest', null, global);
goog.exportSymbol('proto.proto.TypeRef', null, global);
goog.exportSymbol('proto.proto.TypeRef.TestTyperefCase', null, global);
goog.exportSymbol('proto.proto.UnionResolveTypeInfo', null, global);
goog.exportSymbol('proto.proto.UnionResolveTypeRequest', null, global);
goog.exportSymbol('proto.proto.UnionResolveTypeResponse', null, global);
goog.exportSymbol('proto.proto.Value', null, global);
goog.exportSymbol('proto.proto.Value.TestValueCase', null, global);
goog.exportSymbol('proto.proto.Variable', null, global);
goog.exportSymbol('proto.proto.VariableDefinition', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ObjectValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ObjectValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ObjectValue.displayName = 'proto.proto.ObjectValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ArrayValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ArrayValue.repeatedFields_, null);
};
goog.inherits(proto.proto.ArrayValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ArrayValue.displayName = 'proto.proto.ArrayValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Value.oneofGroups_);
};
goog.inherits(proto.proto.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Value.displayName = 'proto.proto.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Error.displayName = 'proto.proto.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Function.displayName = 'proto.proto.Function';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TypeRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.TypeRef.oneofGroups_);
};
goog.inherits(proto.proto.TypeRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TypeRef.displayName = 'proto.proto.TypeRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ResponsePath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ResponsePath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ResponsePath.displayName = 'proto.proto.ResponsePath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Variable.displayName = 'proto.proto.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.VariableDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.VariableDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.VariableDefinition.displayName = 'proto.proto.VariableDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Directive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Directive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Directive.displayName = 'proto.proto.Directive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FragmentDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FragmentDefinition.repeatedFields_, null);
};
goog.inherits(proto.proto.FragmentDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FragmentDefinition.displayName = 'proto.proto.FragmentDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Selection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Selection.repeatedFields_, null);
};
goog.inherits(proto.proto.Selection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Selection.displayName = 'proto.proto.Selection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.OperationDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.OperationDefinition.repeatedFields_, null);
};
goog.inherits(proto.proto.OperationDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.OperationDefinition.displayName = 'proto.proto.OperationDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldResolveInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldResolveInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldResolveInfo.displayName = 'proto.proto.FieldResolveInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldResolveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldResolveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldResolveRequest.displayName = 'proto.proto.FieldResolveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldResolveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldResolveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldResolveResponse.displayName = 'proto.proto.FieldResolveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InterfaceResolveTypeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InterfaceResolveTypeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InterfaceResolveTypeInfo.displayName = 'proto.proto.InterfaceResolveTypeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InterfaceResolveTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InterfaceResolveTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InterfaceResolveTypeRequest.displayName = 'proto.proto.InterfaceResolveTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InterfaceResolveTypeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InterfaceResolveTypeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InterfaceResolveTypeResponse.displayName = 'proto.proto.InterfaceResolveTypeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ScalarParseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ScalarParseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ScalarParseRequest.displayName = 'proto.proto.ScalarParseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ScalarParseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ScalarParseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ScalarParseResponse.displayName = 'proto.proto.ScalarParseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ScalarSerializeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ScalarSerializeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ScalarSerializeRequest.displayName = 'proto.proto.ScalarSerializeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ScalarSerializeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ScalarSerializeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ScalarSerializeResponse.displayName = 'proto.proto.ScalarSerializeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnionResolveTypeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnionResolveTypeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnionResolveTypeInfo.displayName = 'proto.proto.UnionResolveTypeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnionResolveTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnionResolveTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnionResolveTypeRequest.displayName = 'proto.proto.UnionResolveTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnionResolveTypeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnionResolveTypeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnionResolveTypeResponse.displayName = 'proto.proto.UnionResolveTypeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Secret.displayName = 'proto.proto.Secret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetSecretsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SetSecretsRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.SetSecretsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetSecretsRequest.displayName = 'proto.proto.SetSecretsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetSecretsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetSecretsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetSecretsResponse.displayName = 'proto.proto.SetSecretsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StreamInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StreamInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StreamInfo.displayName = 'proto.proto.StreamInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StreamRequest.displayName = 'proto.proto.StreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StreamMessage.displayName = 'proto.proto.StreamMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ByteStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ByteStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ByteStreamRequest.displayName = 'proto.proto.ByteStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ByteStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ByteStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ByteStream.displayName = 'proto.proto.ByteStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SubscriptionConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SubscriptionConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SubscriptionConnectionRequest.displayName = 'proto.proto.SubscriptionConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SubscriptionConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SubscriptionConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SubscriptionConnectionResponse.displayName = 'proto.proto.SubscriptionConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SubscriptionListenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SubscriptionListenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SubscriptionListenRequest.displayName = 'proto.proto.SubscriptionListenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SubscriptionListenMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SubscriptionListenMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SubscriptionListenMessage.displayName = 'proto.proto.SubscriptionListenMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ObjectValue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ObjectValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ObjectValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ObjectValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    propsMap: (f = msg.getPropsMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ObjectValue}
 */
proto.proto.ObjectValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ObjectValue;
  return proto.proto.ObjectValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ObjectValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ObjectValue}
 */
proto.proto.ObjectValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPropsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ObjectValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ObjectValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ObjectValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ObjectValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
};


/**
 * map<string, Value> props = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.ObjectValue.prototype.getPropsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.ObjectValue} returns this
 */
proto.proto.ObjectValue.prototype.clearPropsMap = function() {
  this.getPropsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ArrayValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ArrayValue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ArrayValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ArrayValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ArrayValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ArrayValue}
 */
proto.proto.ArrayValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ArrayValue;
  return proto.proto.ArrayValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ArrayValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ArrayValue}
 */
proto.proto.ArrayValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ArrayValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ArrayValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ArrayValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ArrayValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Value items = 1;
 * @return {!Array<!proto.proto.Value>}
 */
proto.proto.ArrayValue.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.proto.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {!Array<!proto.proto.Value>} value
 * @return {!proto.proto.ArrayValue} returns this
*/
proto.proto.ArrayValue.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Value}
 */
proto.proto.ArrayValue.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ArrayValue} returns this
 */
proto.proto.ArrayValue.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Value.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.proto.Value.TestValueCase = {
  TEST_VALUE_NOT_SET: 0,
  I: 1,
  U: 2,
  F: 3,
  S: 4,
  B: 5,
  O: 6,
  A: 7,
  ANY: 8,
  VARIABLE: 9,
  NIL: 10
};

/**
 * @return {proto.proto.Value.TestValueCase}
 */
proto.proto.Value.prototype.getTestValueCase = function() {
  return /** @type {proto.proto.Value.TestValueCase} */(jspb.Message.computeOneofCase(this, proto.proto.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    i: jspb.Message.getFieldWithDefault(msg, 1, 0),
    u: jspb.Message.getFieldWithDefault(msg, 2, 0),
    f: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    s: jspb.Message.getFieldWithDefault(msg, 4, ""),
    b: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    o: (f = msg.getO()) && proto.proto.ObjectValue.toObject(includeInstance, f),
    a: (f = msg.getA()) && proto.proto.ArrayValue.toObject(includeInstance, f),
    any: msg.getAny_asB64(),
    variable: jspb.Message.getFieldWithDefault(msg, 9, ""),
    nil: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Value}
 */
proto.proto.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Value;
  return proto.proto.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Value}
 */
proto.proto.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setI(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setB(value);
      break;
    case 6:
      var value = new proto.proto.ObjectValue;
      reader.readMessage(value,proto.proto.ObjectValue.deserializeBinaryFromReader);
      msg.setO(value);
      break;
    case 7:
      var value = new proto.proto.ArrayValue;
      reader.readMessage(value,proto.proto.ArrayValue.deserializeBinaryFromReader);
      msg.setA(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAny(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getO();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.ObjectValue.serializeBinaryToWriter
    );
  }
  f = message.getA();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.ArrayValue.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional int64 i = 1;
 * @return {number}
 */
proto.proto.Value.prototype.getI = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setI = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearI = function() {
  return jspb.Message.setOneofField(this, 1, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasI = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 u = 2;
 * @return {number}
 */
proto.proto.Value.prototype.getU = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setU = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearU = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasU = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double f = 3;
 * @return {number}
 */
proto.proto.Value.prototype.getF = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setF = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearF = function() {
  return jspb.Message.setOneofField(this, 3, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasF = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string s = 4;
 * @return {string}
 */
proto.proto.Value.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setS = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearS = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasS = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool b = 5;
 * @return {boolean}
 */
proto.proto.Value.prototype.getB = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setB = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearB = function() {
  return jspb.Message.setOneofField(this, 5, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasB = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ObjectValue o = 6;
 * @return {?proto.proto.ObjectValue}
 */
proto.proto.Value.prototype.getO = function() {
  return /** @type{?proto.proto.ObjectValue} */ (
    jspb.Message.getWrapperField(this, proto.proto.ObjectValue, 6));
};


/**
 * @param {?proto.proto.ObjectValue|undefined} value
 * @return {!proto.proto.Value} returns this
*/
proto.proto.Value.prototype.setO = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearO = function() {
  return this.setO(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasO = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ArrayValue a = 7;
 * @return {?proto.proto.ArrayValue}
 */
proto.proto.Value.prototype.getA = function() {
  return /** @type{?proto.proto.ArrayValue} */ (
    jspb.Message.getWrapperField(this, proto.proto.ArrayValue, 7));
};


/**
 * @param {?proto.proto.ArrayValue|undefined} value
 * @return {!proto.proto.Value} returns this
*/
proto.proto.Value.prototype.setA = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearA = function() {
  return this.setA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasA = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes any = 8;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Value.prototype.getAny = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes any = 8;
 * This is a type-conversion wrapper around `getAny()`
 * @return {string}
 */
proto.proto.Value.prototype.getAny_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAny()));
};


/**
 * optional bytes any = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAny()`
 * @return {!Uint8Array}
 */
proto.proto.Value.prototype.getAny_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAny()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setAny = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearAny = function() {
  return jspb.Message.setOneofField(this, 8, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasAny = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string variable = 9;
 * @return {string}
 */
proto.proto.Value.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setVariable = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearVariable = function() {
  return jspb.Message.setOneofField(this, 9, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool nil = 10;
 * @return {boolean}
 */
proto.proto.Value.prototype.getNil = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.setNil = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.proto.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Value} returns this
 */
proto.proto.Value.prototype.clearNil = function() {
  return jspb.Message.setOneofField(this, 10, proto.proto.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Value.prototype.hasNil = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Error}
 */
proto.proto.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Error;
  return proto.proto.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Error}
 */
proto.proto.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.proto.Error.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Error} returns this
 */
proto.proto.Error.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Function}
 */
proto.proto.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Function;
  return proto.proto.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Function}
 */
proto.proto.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Function.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Function} returns this
 */
proto.proto.Function.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.TypeRef.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.proto.TypeRef.TestTyperefCase = {
  TEST_TYPEREF_NOT_SET: 0,
  NAME: 1,
  NONNULL: 2,
  LIST: 3
};

/**
 * @return {proto.proto.TypeRef.TestTyperefCase}
 */
proto.proto.TypeRef.prototype.getTestTyperefCase = function() {
  return /** @type {proto.proto.TypeRef.TestTyperefCase} */(jspb.Message.computeOneofCase(this, proto.proto.TypeRef.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TypeRef.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TypeRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TypeRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TypeRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonnull: (f = msg.getNonnull()) && proto.proto.TypeRef.toObject(includeInstance, f),
    list: (f = msg.getList()) && proto.proto.TypeRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TypeRef}
 */
proto.proto.TypeRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TypeRef;
  return proto.proto.TypeRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TypeRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TypeRef}
 */
proto.proto.TypeRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setNonnull(value);
      break;
    case 3:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TypeRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TypeRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TypeRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TypeRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonnull();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.TypeRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.TypeRef} returns this
 */
proto.proto.TypeRef.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.proto.TypeRef.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.TypeRef} returns this
 */
proto.proto.TypeRef.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 1, proto.proto.TypeRef.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TypeRef.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TypeRef nonNull = 2;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.TypeRef.prototype.getNonnull = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 2));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.TypeRef} returns this
*/
proto.proto.TypeRef.prototype.setNonnull = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.TypeRef.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TypeRef} returns this
 */
proto.proto.TypeRef.prototype.clearNonnull = function() {
  return this.setNonnull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TypeRef.prototype.hasNonnull = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypeRef list = 3;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.TypeRef.prototype.getList = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 3));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.TypeRef} returns this
*/
proto.proto.TypeRef.prototype.setList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.TypeRef.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TypeRef} returns this
 */
proto.proto.TypeRef.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TypeRef.prototype.hasList = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ResponsePath.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ResponsePath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ResponsePath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ResponsePath.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.proto.Value.toObject(includeInstance, f),
    prev: (f = msg.getPrev()) && proto.proto.ResponsePath.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ResponsePath}
 */
proto.proto.ResponsePath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ResponsePath;
  return proto.proto.ResponsePath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ResponsePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ResponsePath}
 */
proto.proto.ResponsePath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.proto.ResponsePath;
      reader.readMessage(value,proto.proto.ResponsePath.deserializeBinaryFromReader);
      msg.setPrev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ResponsePath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ResponsePath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ResponsePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ResponsePath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getPrev();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ResponsePath.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value key = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.ResponsePath.prototype.getKey = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.ResponsePath} returns this
*/
proto.proto.ResponsePath.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ResponsePath} returns this
 */
proto.proto.ResponsePath.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ResponsePath.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponsePath prev = 2;
 * @return {?proto.proto.ResponsePath}
 */
proto.proto.ResponsePath.prototype.getPrev = function() {
  return /** @type{?proto.proto.ResponsePath} */ (
    jspb.Message.getWrapperField(this, proto.proto.ResponsePath, 2));
};


/**
 * @param {?proto.proto.ResponsePath|undefined} value
 * @return {!proto.proto.ResponsePath} returns this
*/
proto.proto.ResponsePath.prototype.setPrev = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ResponsePath} returns this
 */
proto.proto.ResponsePath.prototype.clearPrev = function() {
  return this.setPrev(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ResponsePath.prototype.hasPrev = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Variable}
 */
proto.proto.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Variable;
  return proto.proto.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Variable}
 */
proto.proto.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Variable} returns this
 */
proto.proto.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.VariableDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.VariableDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.VariableDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.VariableDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: (f = msg.getVariable()) && proto.proto.Variable.toObject(includeInstance, f),
    defaultvalue: (f = msg.getDefaultvalue()) && proto.proto.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.VariableDefinition}
 */
proto.proto.VariableDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.VariableDefinition;
  return proto.proto.VariableDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.VariableDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.VariableDefinition}
 */
proto.proto.VariableDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Variable;
      reader.readMessage(value,proto.proto.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 2:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setDefaultvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.VariableDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.VariableDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.VariableDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.VariableDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Variable.serializeBinaryToWriter
    );
  }
  f = message.getDefaultvalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable variable = 1;
 * @return {?proto.proto.Variable}
 */
proto.proto.VariableDefinition.prototype.getVariable = function() {
  return /** @type{?proto.proto.Variable} */ (
    jspb.Message.getWrapperField(this, proto.proto.Variable, 1));
};


/**
 * @param {?proto.proto.Variable|undefined} value
 * @return {!proto.proto.VariableDefinition} returns this
*/
proto.proto.VariableDefinition.prototype.setVariable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.VariableDefinition} returns this
 */
proto.proto.VariableDefinition.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.VariableDefinition.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value defaultValue = 2;
 * @return {?proto.proto.Value}
 */
proto.proto.VariableDefinition.prototype.getDefaultvalue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 2));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.VariableDefinition} returns this
*/
proto.proto.VariableDefinition.prototype.setDefaultvalue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.VariableDefinition} returns this
 */
proto.proto.VariableDefinition.prototype.clearDefaultvalue = function() {
  return this.setDefaultvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.VariableDefinition.prototype.hasDefaultvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Directive.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Directive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Directive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Directive.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsMap: (f = msg.getArgumentsMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Directive}
 */
proto.proto.Directive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Directive;
  return proto.proto.Directive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Directive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Directive}
 */
proto.proto.Directive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getArgumentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Directive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Directive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Directive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Directive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Directive.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Directive} returns this
 */
proto.proto.Directive.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, Value> arguments = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.Directive.prototype.getArgumentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.Directive} returns this
 */
proto.proto.Directive.prototype.clearArgumentsMap = function() {
  this.getArgumentsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FragmentDefinition.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FragmentDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FragmentDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FragmentDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FragmentDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    directivesList: jspb.Message.toObjectList(msg.getDirectivesList(),
    proto.proto.Directive.toObject, includeInstance),
    typecondition: (f = msg.getTypecondition()) && proto.proto.TypeRef.toObject(includeInstance, f),
    selectionsetList: jspb.Message.toObjectList(msg.getSelectionsetList(),
    proto.proto.Selection.toObject, includeInstance),
    variabledefinitionsList: jspb.Message.toObjectList(msg.getVariabledefinitionsList(),
    proto.proto.VariableDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FragmentDefinition}
 */
proto.proto.FragmentDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FragmentDefinition;
  return proto.proto.FragmentDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FragmentDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FragmentDefinition}
 */
proto.proto.FragmentDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Directive;
      reader.readMessage(value,proto.proto.Directive.deserializeBinaryFromReader);
      msg.addDirectives(value);
      break;
    case 2:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setTypecondition(value);
      break;
    case 3:
      var value = new proto.proto.Selection;
      reader.readMessage(value,proto.proto.Selection.deserializeBinaryFromReader);
      msg.addSelectionset(value);
      break;
    case 4:
      var value = new proto.proto.VariableDefinition;
      reader.readMessage(value,proto.proto.VariableDefinition.deserializeBinaryFromReader);
      msg.addVariabledefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FragmentDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FragmentDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FragmentDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FragmentDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirectivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Directive.serializeBinaryToWriter
    );
  }
  f = message.getTypecondition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getSelectionsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.Selection.serializeBinaryToWriter
    );
  }
  f = message.getVariabledefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.VariableDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Directive directives = 1;
 * @return {!Array<!proto.proto.Directive>}
 */
proto.proto.FragmentDefinition.prototype.getDirectivesList = function() {
  return /** @type{!Array<!proto.proto.Directive>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Directive, 1));
};


/**
 * @param {!Array<!proto.proto.Directive>} value
 * @return {!proto.proto.FragmentDefinition} returns this
*/
proto.proto.FragmentDefinition.prototype.setDirectivesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Directive=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Directive}
 */
proto.proto.FragmentDefinition.prototype.addDirectives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Directive, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.FragmentDefinition} returns this
 */
proto.proto.FragmentDefinition.prototype.clearDirectivesList = function() {
  return this.setDirectivesList([]);
};


/**
 * optional TypeRef typeCondition = 2;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.FragmentDefinition.prototype.getTypecondition = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 2));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.FragmentDefinition} returns this
*/
proto.proto.FragmentDefinition.prototype.setTypecondition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FragmentDefinition} returns this
 */
proto.proto.FragmentDefinition.prototype.clearTypecondition = function() {
  return this.setTypecondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FragmentDefinition.prototype.hasTypecondition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Selection selectionSet = 3;
 * @return {!Array<!proto.proto.Selection>}
 */
proto.proto.FragmentDefinition.prototype.getSelectionsetList = function() {
  return /** @type{!Array<!proto.proto.Selection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Selection, 3));
};


/**
 * @param {!Array<!proto.proto.Selection>} value
 * @return {!proto.proto.FragmentDefinition} returns this
*/
proto.proto.FragmentDefinition.prototype.setSelectionsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.Selection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Selection}
 */
proto.proto.FragmentDefinition.prototype.addSelectionset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.Selection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.FragmentDefinition} returns this
 */
proto.proto.FragmentDefinition.prototype.clearSelectionsetList = function() {
  return this.setSelectionsetList([]);
};


/**
 * repeated VariableDefinition variableDefinitions = 4;
 * @return {!Array<!proto.proto.VariableDefinition>}
 */
proto.proto.FragmentDefinition.prototype.getVariabledefinitionsList = function() {
  return /** @type{!Array<!proto.proto.VariableDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.VariableDefinition, 4));
};


/**
 * @param {!Array<!proto.proto.VariableDefinition>} value
 * @return {!proto.proto.FragmentDefinition} returns this
*/
proto.proto.FragmentDefinition.prototype.setVariabledefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.VariableDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.VariableDefinition}
 */
proto.proto.FragmentDefinition.prototype.addVariabledefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.VariableDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.FragmentDefinition} returns this
 */
proto.proto.FragmentDefinition.prototype.clearVariabledefinitionsList = function() {
  return this.setVariabledefinitionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Selection.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Selection.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Selection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Selection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Selection.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsMap: (f = msg.getArgumentsMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : [],
    directivesList: jspb.Message.toObjectList(msg.getDirectivesList(),
    proto.proto.Directive.toObject, includeInstance),
    selectionsetList: jspb.Message.toObjectList(msg.getSelectionsetList(),
    proto.proto.Selection.toObject, includeInstance),
    definition: (f = msg.getDefinition()) && proto.proto.FragmentDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Selection}
 */
proto.proto.Selection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Selection;
  return proto.proto.Selection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Selection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Selection}
 */
proto.proto.Selection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getArgumentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    case 3:
      var value = new proto.proto.Directive;
      reader.readMessage(value,proto.proto.Directive.deserializeBinaryFromReader);
      msg.addDirectives(value);
      break;
    case 4:
      var value = new proto.proto.Selection;
      reader.readMessage(value,proto.proto.Selection.deserializeBinaryFromReader);
      msg.addSelectionset(value);
      break;
    case 5:
      var value = new proto.proto.FragmentDefinition;
      reader.readMessage(value,proto.proto.FragmentDefinition.deserializeBinaryFromReader);
      msg.setDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Selection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Selection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Selection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Selection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
  f = message.getDirectivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.Directive.serializeBinaryToWriter
    );
  }
  f = message.getSelectionsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.Selection.serializeBinaryToWriter
    );
  }
  f = message.getDefinition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.FragmentDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Selection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Selection} returns this
 */
proto.proto.Selection.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, Value> arguments = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.Selection.prototype.getArgumentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.Selection} returns this
 */
proto.proto.Selection.prototype.clearArgumentsMap = function() {
  this.getArgumentsMap().clear();
  return this;};


/**
 * repeated Directive directives = 3;
 * @return {!Array<!proto.proto.Directive>}
 */
proto.proto.Selection.prototype.getDirectivesList = function() {
  return /** @type{!Array<!proto.proto.Directive>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Directive, 3));
};


/**
 * @param {!Array<!proto.proto.Directive>} value
 * @return {!proto.proto.Selection} returns this
*/
proto.proto.Selection.prototype.setDirectivesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.Directive=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Directive}
 */
proto.proto.Selection.prototype.addDirectives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.Directive, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Selection} returns this
 */
proto.proto.Selection.prototype.clearDirectivesList = function() {
  return this.setDirectivesList([]);
};


/**
 * repeated Selection selectionSet = 4;
 * @return {!Array<!proto.proto.Selection>}
 */
proto.proto.Selection.prototype.getSelectionsetList = function() {
  return /** @type{!Array<!proto.proto.Selection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Selection, 4));
};


/**
 * @param {!Array<!proto.proto.Selection>} value
 * @return {!proto.proto.Selection} returns this
*/
proto.proto.Selection.prototype.setSelectionsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.Selection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Selection}
 */
proto.proto.Selection.prototype.addSelectionset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.Selection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Selection} returns this
 */
proto.proto.Selection.prototype.clearSelectionsetList = function() {
  return this.setSelectionsetList([]);
};


/**
 * optional FragmentDefinition definition = 5;
 * @return {?proto.proto.FragmentDefinition}
 */
proto.proto.Selection.prototype.getDefinition = function() {
  return /** @type{?proto.proto.FragmentDefinition} */ (
    jspb.Message.getWrapperField(this, proto.proto.FragmentDefinition, 5));
};


/**
 * @param {?proto.proto.FragmentDefinition|undefined} value
 * @return {!proto.proto.Selection} returns this
*/
proto.proto.Selection.prototype.setDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Selection} returns this
 */
proto.proto.Selection.prototype.clearDefinition = function() {
  return this.setDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Selection.prototype.hasDefinition = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.OperationDefinition.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.OperationDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.OperationDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.OperationDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.OperationDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variabledefinitionsList: jspb.Message.toObjectList(msg.getVariabledefinitionsList(),
    proto.proto.VariableDefinition.toObject, includeInstance),
    directivesList: jspb.Message.toObjectList(msg.getDirectivesList(),
    proto.proto.Directive.toObject, includeInstance),
    selectionsetList: jspb.Message.toObjectList(msg.getSelectionsetList(),
    proto.proto.Selection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.OperationDefinition}
 */
proto.proto.OperationDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.OperationDefinition;
  return proto.proto.OperationDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.OperationDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.OperationDefinition}
 */
proto.proto.OperationDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.proto.VariableDefinition;
      reader.readMessage(value,proto.proto.VariableDefinition.deserializeBinaryFromReader);
      msg.addVariabledefinitions(value);
      break;
    case 4:
      var value = new proto.proto.Directive;
      reader.readMessage(value,proto.proto.Directive.deserializeBinaryFromReader);
      msg.addDirectives(value);
      break;
    case 5:
      var value = new proto.proto.Selection;
      reader.readMessage(value,proto.proto.Selection.deserializeBinaryFromReader);
      msg.addSelectionset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.OperationDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.OperationDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.OperationDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.OperationDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVariabledefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.VariableDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDirectivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.Directive.serializeBinaryToWriter
    );
  }
  f = message.getSelectionsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.Selection.serializeBinaryToWriter
    );
  }
};


/**
 * optional string operation = 1;
 * @return {string}
 */
proto.proto.OperationDefinition.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.OperationDefinition} returns this
 */
proto.proto.OperationDefinition.prototype.setOperation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.OperationDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.OperationDefinition} returns this
 */
proto.proto.OperationDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated VariableDefinition variableDefinitions = 3;
 * @return {!Array<!proto.proto.VariableDefinition>}
 */
proto.proto.OperationDefinition.prototype.getVariabledefinitionsList = function() {
  return /** @type{!Array<!proto.proto.VariableDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.VariableDefinition, 3));
};


/**
 * @param {!Array<!proto.proto.VariableDefinition>} value
 * @return {!proto.proto.OperationDefinition} returns this
*/
proto.proto.OperationDefinition.prototype.setVariabledefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.VariableDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.VariableDefinition}
 */
proto.proto.OperationDefinition.prototype.addVariabledefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.VariableDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.OperationDefinition} returns this
 */
proto.proto.OperationDefinition.prototype.clearVariabledefinitionsList = function() {
  return this.setVariabledefinitionsList([]);
};


/**
 * repeated Directive directives = 4;
 * @return {!Array<!proto.proto.Directive>}
 */
proto.proto.OperationDefinition.prototype.getDirectivesList = function() {
  return /** @type{!Array<!proto.proto.Directive>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Directive, 4));
};


/**
 * @param {!Array<!proto.proto.Directive>} value
 * @return {!proto.proto.OperationDefinition} returns this
*/
proto.proto.OperationDefinition.prototype.setDirectivesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.Directive=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Directive}
 */
proto.proto.OperationDefinition.prototype.addDirectives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.Directive, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.OperationDefinition} returns this
 */
proto.proto.OperationDefinition.prototype.clearDirectivesList = function() {
  return this.setDirectivesList([]);
};


/**
 * repeated Selection selectionSet = 5;
 * @return {!Array<!proto.proto.Selection>}
 */
proto.proto.OperationDefinition.prototype.getSelectionsetList = function() {
  return /** @type{!Array<!proto.proto.Selection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Selection, 5));
};


/**
 * @param {!Array<!proto.proto.Selection>} value
 * @return {!proto.proto.OperationDefinition} returns this
*/
proto.proto.OperationDefinition.prototype.setSelectionsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.Selection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Selection}
 */
proto.proto.OperationDefinition.prototype.addSelectionset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.Selection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.OperationDefinition} returns this
 */
proto.proto.OperationDefinition.prototype.clearSelectionsetList = function() {
  return this.setSelectionsetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldResolveInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldResolveInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldResolveInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldResolveInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: (f = msg.getPath()) && proto.proto.ResponsePath.toObject(includeInstance, f),
    returntype: (f = msg.getReturntype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    parenttype: (f = msg.getParenttype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    operation: (f = msg.getOperation()) && proto.proto.OperationDefinition.toObject(includeInstance, f),
    variablevaluesMap: (f = msg.getVariablevaluesMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldResolveInfo}
 */
proto.proto.FieldResolveInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldResolveInfo;
  return proto.proto.FieldResolveInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldResolveInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldResolveInfo}
 */
proto.proto.FieldResolveInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldname(value);
      break;
    case 2:
      var value = new proto.proto.ResponsePath;
      reader.readMessage(value,proto.proto.ResponsePath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 3:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setReturntype(value);
      break;
    case 4:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setParenttype(value);
      break;
    case 5:
      var value = new proto.proto.OperationDefinition;
      reader.readMessage(value,proto.proto.OperationDefinition.deserializeBinaryFromReader);
      msg.setOperation(value);
      break;
    case 6:
      var value = msg.getVariablevaluesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldResolveInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldResolveInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldResolveInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldResolveInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ResponsePath.serializeBinaryToWriter
    );
  }
  f = message.getReturntype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getParenttype();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getOperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.OperationDefinition.serializeBinaryToWriter
    );
  }
  f = message.getVariablevaluesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string fieldName = 1;
 * @return {string}
 */
proto.proto.FieldResolveInfo.prototype.getFieldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FieldResolveInfo} returns this
 */
proto.proto.FieldResolveInfo.prototype.setFieldname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponsePath path = 2;
 * @return {?proto.proto.ResponsePath}
 */
proto.proto.FieldResolveInfo.prototype.getPath = function() {
  return /** @type{?proto.proto.ResponsePath} */ (
    jspb.Message.getWrapperField(this, proto.proto.ResponsePath, 2));
};


/**
 * @param {?proto.proto.ResponsePath|undefined} value
 * @return {!proto.proto.FieldResolveInfo} returns this
*/
proto.proto.FieldResolveInfo.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveInfo} returns this
 */
proto.proto.FieldResolveInfo.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveInfo.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypeRef returnType = 3;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.FieldResolveInfo.prototype.getReturntype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 3));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.FieldResolveInfo} returns this
*/
proto.proto.FieldResolveInfo.prototype.setReturntype = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveInfo} returns this
 */
proto.proto.FieldResolveInfo.prototype.clearReturntype = function() {
  return this.setReturntype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveInfo.prototype.hasReturntype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeRef parentType = 4;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.FieldResolveInfo.prototype.getParenttype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 4));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.FieldResolveInfo} returns this
*/
proto.proto.FieldResolveInfo.prototype.setParenttype = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveInfo} returns this
 */
proto.proto.FieldResolveInfo.prototype.clearParenttype = function() {
  return this.setParenttype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveInfo.prototype.hasParenttype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OperationDefinition operation = 5;
 * @return {?proto.proto.OperationDefinition}
 */
proto.proto.FieldResolveInfo.prototype.getOperation = function() {
  return /** @type{?proto.proto.OperationDefinition} */ (
    jspb.Message.getWrapperField(this, proto.proto.OperationDefinition, 5));
};


/**
 * @param {?proto.proto.OperationDefinition|undefined} value
 * @return {!proto.proto.FieldResolveInfo} returns this
*/
proto.proto.FieldResolveInfo.prototype.setOperation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveInfo} returns this
 */
proto.proto.FieldResolveInfo.prototype.clearOperation = function() {
  return this.setOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveInfo.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, Value> variableValues = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.FieldResolveInfo.prototype.getVariablevaluesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.FieldResolveInfo} returns this
 */
proto.proto.FieldResolveInfo.prototype.clearVariablevaluesMap = function() {
  this.getVariablevaluesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldResolveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldResolveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldResolveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldResolveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f),
    source: (f = msg.getSource()) && proto.proto.Value.toObject(includeInstance, f),
    argumentsMap: (f = msg.getArgumentsMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : [],
    info: (f = msg.getInfo()) && proto.proto.FieldResolveInfo.toObject(includeInstance, f),
    secretsMap: (f = msg.getSecretsMap()) ? f.toObject(includeInstance, undefined) : [],
    protocol: (f = msg.getProtocol()) && proto.proto.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldResolveRequest}
 */
proto.proto.FieldResolveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldResolveRequest;
  return proto.proto.FieldResolveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldResolveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldResolveRequest}
 */
proto.proto.FieldResolveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 3:
      var value = msg.getArgumentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    case 4:
      var value = new proto.proto.FieldResolveInfo;
      reader.readMessage(value,proto.proto.FieldResolveInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 5:
      var value = msg.getSecretsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldResolveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldResolveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldResolveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldResolveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getArgumentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.FieldResolveInfo.serializeBinaryToWriter
    );
  }
  f = message.getSecretsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.proto.Function}
 */
proto.proto.FieldResolveRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 1));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.FieldResolveRequest} returns this
*/
proto.proto.FieldResolveRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveRequest} returns this
 */
proto.proto.FieldResolveRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value source = 2;
 * @return {?proto.proto.Value}
 */
proto.proto.FieldResolveRequest.prototype.getSource = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 2));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.FieldResolveRequest} returns this
*/
proto.proto.FieldResolveRequest.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveRequest} returns this
 */
proto.proto.FieldResolveRequest.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, Value> arguments = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.FieldResolveRequest.prototype.getArgumentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.FieldResolveRequest} returns this
 */
proto.proto.FieldResolveRequest.prototype.clearArgumentsMap = function() {
  this.getArgumentsMap().clear();
  return this;};


/**
 * optional FieldResolveInfo info = 4;
 * @return {?proto.proto.FieldResolveInfo}
 */
proto.proto.FieldResolveRequest.prototype.getInfo = function() {
  return /** @type{?proto.proto.FieldResolveInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.FieldResolveInfo, 4));
};


/**
 * @param {?proto.proto.FieldResolveInfo|undefined} value
 * @return {!proto.proto.FieldResolveRequest} returns this
*/
proto.proto.FieldResolveRequest.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveRequest} returns this
 */
proto.proto.FieldResolveRequest.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveRequest.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, string> secrets = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.FieldResolveRequest.prototype.getSecretsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.FieldResolveRequest} returns this
 */
proto.proto.FieldResolveRequest.prototype.clearSecretsMap = function() {
  this.getSecretsMap().clear();
  return this;};


/**
 * optional Value protocol = 6;
 * @return {?proto.proto.Value}
 */
proto.proto.FieldResolveRequest.prototype.getProtocol = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 6));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.FieldResolveRequest} returns this
*/
proto.proto.FieldResolveRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveRequest} returns this
 */
proto.proto.FieldResolveRequest.prototype.clearProtocol = function() {
  return this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldResolveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldResolveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldResolveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldResolveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.proto.Value.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldResolveResponse}
 */
proto.proto.FieldResolveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldResolveResponse;
  return proto.proto.FieldResolveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldResolveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldResolveResponse}
 */
proto.proto.FieldResolveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldResolveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldResolveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldResolveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldResolveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value response = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.FieldResolveResponse.prototype.getResponse = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.FieldResolveResponse} returns this
*/
proto.proto.FieldResolveResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveResponse} returns this
 */
proto.proto.FieldResolveResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.FieldResolveResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.FieldResolveResponse} returns this
*/
proto.proto.FieldResolveResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldResolveResponse} returns this
 */
proto.proto.FieldResolveResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldResolveResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InterfaceResolveTypeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InterfaceResolveTypeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InterfaceResolveTypeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: (f = msg.getPath()) && proto.proto.ResponsePath.toObject(includeInstance, f),
    returntype: (f = msg.getReturntype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    parenttype: (f = msg.getParenttype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    operation: (f = msg.getOperation()) && proto.proto.OperationDefinition.toObject(includeInstance, f),
    variablevaluesMap: (f = msg.getVariablevaluesMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InterfaceResolveTypeInfo}
 */
proto.proto.InterfaceResolveTypeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InterfaceResolveTypeInfo;
  return proto.proto.InterfaceResolveTypeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InterfaceResolveTypeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InterfaceResolveTypeInfo}
 */
proto.proto.InterfaceResolveTypeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldname(value);
      break;
    case 2:
      var value = new proto.proto.ResponsePath;
      reader.readMessage(value,proto.proto.ResponsePath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 3:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setReturntype(value);
      break;
    case 4:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setParenttype(value);
      break;
    case 5:
      var value = new proto.proto.OperationDefinition;
      reader.readMessage(value,proto.proto.OperationDefinition.deserializeBinaryFromReader);
      msg.setOperation(value);
      break;
    case 6:
      var value = msg.getVariablevaluesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InterfaceResolveTypeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InterfaceResolveTypeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InterfaceResolveTypeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ResponsePath.serializeBinaryToWriter
    );
  }
  f = message.getReturntype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getParenttype();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getOperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.OperationDefinition.serializeBinaryToWriter
    );
  }
  f = message.getVariablevaluesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string fieldName = 1;
 * @return {string}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.getFieldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
 */
proto.proto.InterfaceResolveTypeInfo.prototype.setFieldname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponsePath path = 2;
 * @return {?proto.proto.ResponsePath}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.getPath = function() {
  return /** @type{?proto.proto.ResponsePath} */ (
    jspb.Message.getWrapperField(this, proto.proto.ResponsePath, 2));
};


/**
 * @param {?proto.proto.ResponsePath|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
*/
proto.proto.InterfaceResolveTypeInfo.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
 */
proto.proto.InterfaceResolveTypeInfo.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypeRef returnType = 3;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.getReturntype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 3));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
*/
proto.proto.InterfaceResolveTypeInfo.prototype.setReturntype = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
 */
proto.proto.InterfaceResolveTypeInfo.prototype.clearReturntype = function() {
  return this.setReturntype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.hasReturntype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeRef parentType = 4;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.getParenttype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 4));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
*/
proto.proto.InterfaceResolveTypeInfo.prototype.setParenttype = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
 */
proto.proto.InterfaceResolveTypeInfo.prototype.clearParenttype = function() {
  return this.setParenttype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.hasParenttype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OperationDefinition operation = 5;
 * @return {?proto.proto.OperationDefinition}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.getOperation = function() {
  return /** @type{?proto.proto.OperationDefinition} */ (
    jspb.Message.getWrapperField(this, proto.proto.OperationDefinition, 5));
};


/**
 * @param {?proto.proto.OperationDefinition|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
*/
proto.proto.InterfaceResolveTypeInfo.prototype.setOperation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
 */
proto.proto.InterfaceResolveTypeInfo.prototype.clearOperation = function() {
  return this.setOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, Value> variableValues = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.InterfaceResolveTypeInfo.prototype.getVariablevaluesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.InterfaceResolveTypeInfo} returns this
 */
proto.proto.InterfaceResolveTypeInfo.prototype.clearVariablevaluesMap = function() {
  this.getVariablevaluesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InterfaceResolveTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InterfaceResolveTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InterfaceResolveTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.proto.Value.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.proto.InterfaceResolveTypeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InterfaceResolveTypeRequest}
 */
proto.proto.InterfaceResolveTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InterfaceResolveTypeRequest;
  return proto.proto.InterfaceResolveTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InterfaceResolveTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InterfaceResolveTypeRequest}
 */
proto.proto.InterfaceResolveTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.proto.InterfaceResolveTypeInfo;
      reader.readMessage(value,proto.proto.InterfaceResolveTypeInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InterfaceResolveTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InterfaceResolveTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InterfaceResolveTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.InterfaceResolveTypeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.proto.Function}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 1));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeRequest} returns this
*/
proto.proto.InterfaceResolveTypeRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeRequest} returns this
 */
proto.proto.InterfaceResolveTypeRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value value = 2;
 * @return {?proto.proto.Value}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.getValue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 2));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeRequest} returns this
*/
proto.proto.InterfaceResolveTypeRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeRequest} returns this
 */
proto.proto.InterfaceResolveTypeRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InterfaceResolveTypeInfo info = 3;
 * @return {?proto.proto.InterfaceResolveTypeInfo}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.getInfo = function() {
  return /** @type{?proto.proto.InterfaceResolveTypeInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.InterfaceResolveTypeInfo, 3));
};


/**
 * @param {?proto.proto.InterfaceResolveTypeInfo|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeRequest} returns this
*/
proto.proto.InterfaceResolveTypeRequest.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeRequest} returns this
 */
proto.proto.InterfaceResolveTypeRequest.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeRequest.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InterfaceResolveTypeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InterfaceResolveTypeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InterfaceResolveTypeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InterfaceResolveTypeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = msg.getType()) && proto.proto.TypeRef.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InterfaceResolveTypeResponse}
 */
proto.proto.InterfaceResolveTypeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InterfaceResolveTypeResponse;
  return proto.proto.InterfaceResolveTypeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InterfaceResolveTypeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InterfaceResolveTypeResponse}
 */
proto.proto.InterfaceResolveTypeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InterfaceResolveTypeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InterfaceResolveTypeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InterfaceResolveTypeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InterfaceResolveTypeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional TypeRef type = 1;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.InterfaceResolveTypeResponse.prototype.getType = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 1));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeResponse} returns this
*/
proto.proto.InterfaceResolveTypeResponse.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeResponse} returns this
 */
proto.proto.InterfaceResolveTypeResponse.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeResponse.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.InterfaceResolveTypeResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.InterfaceResolveTypeResponse} returns this
*/
proto.proto.InterfaceResolveTypeResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.InterfaceResolveTypeResponse} returns this
 */
proto.proto.InterfaceResolveTypeResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.InterfaceResolveTypeResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ScalarParseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ScalarParseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ScalarParseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarParseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.proto.Value.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ScalarParseRequest}
 */
proto.proto.ScalarParseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ScalarParseRequest;
  return proto.proto.ScalarParseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ScalarParseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ScalarParseRequest}
 */
proto.proto.ScalarParseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ScalarParseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ScalarParseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ScalarParseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarParseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value value = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.ScalarParseRequest.prototype.getValue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.ScalarParseRequest} returns this
*/
proto.proto.ScalarParseRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarParseRequest} returns this
 */
proto.proto.ScalarParseRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarParseRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Function function = 2;
 * @return {?proto.proto.Function}
 */
proto.proto.ScalarParseRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 2));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.ScalarParseRequest} returns this
*/
proto.proto.ScalarParseRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarParseRequest} returns this
 */
proto.proto.ScalarParseRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarParseRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ScalarParseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ScalarParseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ScalarParseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarParseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.proto.Value.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ScalarParseResponse}
 */
proto.proto.ScalarParseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ScalarParseResponse;
  return proto.proto.ScalarParseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ScalarParseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ScalarParseResponse}
 */
proto.proto.ScalarParseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ScalarParseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ScalarParseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ScalarParseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarParseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value value = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.ScalarParseResponse.prototype.getValue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.ScalarParseResponse} returns this
*/
proto.proto.ScalarParseResponse.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarParseResponse} returns this
 */
proto.proto.ScalarParseResponse.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarParseResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.ScalarParseResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.ScalarParseResponse} returns this
*/
proto.proto.ScalarParseResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarParseResponse} returns this
 */
proto.proto.ScalarParseResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarParseResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ScalarSerializeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ScalarSerializeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ScalarSerializeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarSerializeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.proto.Value.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ScalarSerializeRequest}
 */
proto.proto.ScalarSerializeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ScalarSerializeRequest;
  return proto.proto.ScalarSerializeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ScalarSerializeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ScalarSerializeRequest}
 */
proto.proto.ScalarSerializeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ScalarSerializeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ScalarSerializeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ScalarSerializeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarSerializeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value value = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.ScalarSerializeRequest.prototype.getValue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.ScalarSerializeRequest} returns this
*/
proto.proto.ScalarSerializeRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarSerializeRequest} returns this
 */
proto.proto.ScalarSerializeRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarSerializeRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Function function = 2;
 * @return {?proto.proto.Function}
 */
proto.proto.ScalarSerializeRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 2));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.ScalarSerializeRequest} returns this
*/
proto.proto.ScalarSerializeRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarSerializeRequest} returns this
 */
proto.proto.ScalarSerializeRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarSerializeRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ScalarSerializeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ScalarSerializeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ScalarSerializeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarSerializeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.proto.Value.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ScalarSerializeResponse}
 */
proto.proto.ScalarSerializeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ScalarSerializeResponse;
  return proto.proto.ScalarSerializeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ScalarSerializeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ScalarSerializeResponse}
 */
proto.proto.ScalarSerializeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ScalarSerializeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ScalarSerializeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ScalarSerializeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScalarSerializeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value value = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.ScalarSerializeResponse.prototype.getValue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.ScalarSerializeResponse} returns this
*/
proto.proto.ScalarSerializeResponse.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarSerializeResponse} returns this
 */
proto.proto.ScalarSerializeResponse.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarSerializeResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.ScalarSerializeResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.ScalarSerializeResponse} returns this
*/
proto.proto.ScalarSerializeResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ScalarSerializeResponse} returns this
 */
proto.proto.ScalarSerializeResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ScalarSerializeResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnionResolveTypeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnionResolveTypeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnionResolveTypeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnionResolveTypeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: (f = msg.getPath()) && proto.proto.ResponsePath.toObject(includeInstance, f),
    returntype: (f = msg.getReturntype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    parenttype: (f = msg.getParenttype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    operation: (f = msg.getOperation()) && proto.proto.OperationDefinition.toObject(includeInstance, f),
    variablevaluesMap: (f = msg.getVariablevaluesMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnionResolveTypeInfo}
 */
proto.proto.UnionResolveTypeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnionResolveTypeInfo;
  return proto.proto.UnionResolveTypeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnionResolveTypeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnionResolveTypeInfo}
 */
proto.proto.UnionResolveTypeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldname(value);
      break;
    case 2:
      var value = new proto.proto.ResponsePath;
      reader.readMessage(value,proto.proto.ResponsePath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 3:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setReturntype(value);
      break;
    case 4:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setParenttype(value);
      break;
    case 5:
      var value = new proto.proto.OperationDefinition;
      reader.readMessage(value,proto.proto.OperationDefinition.deserializeBinaryFromReader);
      msg.setOperation(value);
      break;
    case 6:
      var value = msg.getVariablevaluesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnionResolveTypeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnionResolveTypeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnionResolveTypeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnionResolveTypeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ResponsePath.serializeBinaryToWriter
    );
  }
  f = message.getReturntype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getParenttype();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getOperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.OperationDefinition.serializeBinaryToWriter
    );
  }
  f = message.getVariablevaluesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string fieldName = 1;
 * @return {string}
 */
proto.proto.UnionResolveTypeInfo.prototype.getFieldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
 */
proto.proto.UnionResolveTypeInfo.prototype.setFieldname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponsePath path = 2;
 * @return {?proto.proto.ResponsePath}
 */
proto.proto.UnionResolveTypeInfo.prototype.getPath = function() {
  return /** @type{?proto.proto.ResponsePath} */ (
    jspb.Message.getWrapperField(this, proto.proto.ResponsePath, 2));
};


/**
 * @param {?proto.proto.ResponsePath|undefined} value
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
*/
proto.proto.UnionResolveTypeInfo.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
 */
proto.proto.UnionResolveTypeInfo.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeInfo.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypeRef returnType = 3;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.UnionResolveTypeInfo.prototype.getReturntype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 3));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
*/
proto.proto.UnionResolveTypeInfo.prototype.setReturntype = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
 */
proto.proto.UnionResolveTypeInfo.prototype.clearReturntype = function() {
  return this.setReturntype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeInfo.prototype.hasReturntype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeRef parentType = 4;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.UnionResolveTypeInfo.prototype.getParenttype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 4));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
*/
proto.proto.UnionResolveTypeInfo.prototype.setParenttype = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
 */
proto.proto.UnionResolveTypeInfo.prototype.clearParenttype = function() {
  return this.setParenttype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeInfo.prototype.hasParenttype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OperationDefinition operation = 5;
 * @return {?proto.proto.OperationDefinition}
 */
proto.proto.UnionResolveTypeInfo.prototype.getOperation = function() {
  return /** @type{?proto.proto.OperationDefinition} */ (
    jspb.Message.getWrapperField(this, proto.proto.OperationDefinition, 5));
};


/**
 * @param {?proto.proto.OperationDefinition|undefined} value
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
*/
proto.proto.UnionResolveTypeInfo.prototype.setOperation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
 */
proto.proto.UnionResolveTypeInfo.prototype.clearOperation = function() {
  return this.setOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeInfo.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, Value> variableValues = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.UnionResolveTypeInfo.prototype.getVariablevaluesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.UnionResolveTypeInfo} returns this
 */
proto.proto.UnionResolveTypeInfo.prototype.clearVariablevaluesMap = function() {
  this.getVariablevaluesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnionResolveTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnionResolveTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnionResolveTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnionResolveTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.proto.Value.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.proto.UnionResolveTypeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnionResolveTypeRequest}
 */
proto.proto.UnionResolveTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnionResolveTypeRequest;
  return proto.proto.UnionResolveTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnionResolveTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnionResolveTypeRequest}
 */
proto.proto.UnionResolveTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.proto.UnionResolveTypeInfo;
      reader.readMessage(value,proto.proto.UnionResolveTypeInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnionResolveTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnionResolveTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnionResolveTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnionResolveTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.UnionResolveTypeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.proto.Function}
 */
proto.proto.UnionResolveTypeRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 1));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.UnionResolveTypeRequest} returns this
*/
proto.proto.UnionResolveTypeRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeRequest} returns this
 */
proto.proto.UnionResolveTypeRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value value = 2;
 * @return {?proto.proto.Value}
 */
proto.proto.UnionResolveTypeRequest.prototype.getValue = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 2));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.UnionResolveTypeRequest} returns this
*/
proto.proto.UnionResolveTypeRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeRequest} returns this
 */
proto.proto.UnionResolveTypeRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UnionResolveTypeInfo info = 3;
 * @return {?proto.proto.UnionResolveTypeInfo}
 */
proto.proto.UnionResolveTypeRequest.prototype.getInfo = function() {
  return /** @type{?proto.proto.UnionResolveTypeInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.UnionResolveTypeInfo, 3));
};


/**
 * @param {?proto.proto.UnionResolveTypeInfo|undefined} value
 * @return {!proto.proto.UnionResolveTypeRequest} returns this
*/
proto.proto.UnionResolveTypeRequest.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeRequest} returns this
 */
proto.proto.UnionResolveTypeRequest.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeRequest.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnionResolveTypeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnionResolveTypeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnionResolveTypeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnionResolveTypeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = msg.getType()) && proto.proto.TypeRef.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnionResolveTypeResponse}
 */
proto.proto.UnionResolveTypeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnionResolveTypeResponse;
  return proto.proto.UnionResolveTypeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnionResolveTypeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnionResolveTypeResponse}
 */
proto.proto.UnionResolveTypeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnionResolveTypeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnionResolveTypeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnionResolveTypeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnionResolveTypeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional TypeRef type = 1;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.UnionResolveTypeResponse.prototype.getType = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 1));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.UnionResolveTypeResponse} returns this
*/
proto.proto.UnionResolveTypeResponse.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeResponse} returns this
 */
proto.proto.UnionResolveTypeResponse.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeResponse.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.UnionResolveTypeResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.UnionResolveTypeResponse} returns this
*/
proto.proto.UnionResolveTypeResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UnionResolveTypeResponse} returns this
 */
proto.proto.UnionResolveTypeResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UnionResolveTypeResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Secret}
 */
proto.proto.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Secret;
  return proto.proto.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Secret}
 */
proto.proto.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.proto.Secret.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Secret} returns this
 */
proto.proto.Secret.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Value = 2;
 * @return {string}
 */
proto.proto.Secret.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Secret} returns this
 */
proto.proto.Secret.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SetSecretsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetSecretsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetSecretsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetSecretsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetSecretsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretsList: jspb.Message.toObjectList(msg.getSecretsList(),
    proto.proto.Secret.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetSecretsRequest}
 */
proto.proto.SetSecretsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetSecretsRequest;
  return proto.proto.SetSecretsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetSecretsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetSecretsRequest}
 */
proto.proto.SetSecretsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Secret;
      reader.readMessage(value,proto.proto.Secret.deserializeBinaryFromReader);
      msg.addSecrets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetSecretsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetSecretsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetSecretsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetSecretsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Secret.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Secret secrets = 1;
 * @return {!Array<!proto.proto.Secret>}
 */
proto.proto.SetSecretsRequest.prototype.getSecretsList = function() {
  return /** @type{!Array<!proto.proto.Secret>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Secret, 1));
};


/**
 * @param {!Array<!proto.proto.Secret>} value
 * @return {!proto.proto.SetSecretsRequest} returns this
*/
proto.proto.SetSecretsRequest.prototype.setSecretsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Secret=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Secret}
 */
proto.proto.SetSecretsRequest.prototype.addSecrets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Secret, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.SetSecretsRequest} returns this
 */
proto.proto.SetSecretsRequest.prototype.clearSecretsList = function() {
  return this.setSecretsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetSecretsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetSecretsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetSecretsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetSecretsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetSecretsResponse}
 */
proto.proto.SetSecretsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetSecretsResponse;
  return proto.proto.SetSecretsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetSecretsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetSecretsResponse}
 */
proto.proto.SetSecretsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetSecretsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetSecretsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetSecretsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetSecretsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Error error = 1;
 * @return {?proto.proto.Error}
 */
proto.proto.SetSecretsResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 1));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.SetSecretsResponse} returns this
*/
proto.proto.SetSecretsResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SetSecretsResponse} returns this
 */
proto.proto.SetSecretsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SetSecretsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StreamInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StreamInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StreamInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: (f = msg.getPath()) && proto.proto.ResponsePath.toObject(includeInstance, f),
    returntype: (f = msg.getReturntype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    parenttype: (f = msg.getParenttype()) && proto.proto.TypeRef.toObject(includeInstance, f),
    operation: (f = msg.getOperation()) && proto.proto.OperationDefinition.toObject(includeInstance, f),
    variablevaluesMap: (f = msg.getVariablevaluesMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StreamInfo}
 */
proto.proto.StreamInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StreamInfo;
  return proto.proto.StreamInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StreamInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StreamInfo}
 */
proto.proto.StreamInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldname(value);
      break;
    case 2:
      var value = new proto.proto.ResponsePath;
      reader.readMessage(value,proto.proto.ResponsePath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 3:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setReturntype(value);
      break;
    case 4:
      var value = new proto.proto.TypeRef;
      reader.readMessage(value,proto.proto.TypeRef.deserializeBinaryFromReader);
      msg.setParenttype(value);
      break;
    case 5:
      var value = new proto.proto.OperationDefinition;
      reader.readMessage(value,proto.proto.OperationDefinition.deserializeBinaryFromReader);
      msg.setOperation(value);
      break;
    case 6:
      var value = msg.getVariablevaluesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StreamInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StreamInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StreamInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ResponsePath.serializeBinaryToWriter
    );
  }
  f = message.getReturntype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getParenttype();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.TypeRef.serializeBinaryToWriter
    );
  }
  f = message.getOperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.OperationDefinition.serializeBinaryToWriter
    );
  }
  f = message.getVariablevaluesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string fieldName = 1;
 * @return {string}
 */
proto.proto.StreamInfo.prototype.getFieldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.StreamInfo} returns this
 */
proto.proto.StreamInfo.prototype.setFieldname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponsePath path = 2;
 * @return {?proto.proto.ResponsePath}
 */
proto.proto.StreamInfo.prototype.getPath = function() {
  return /** @type{?proto.proto.ResponsePath} */ (
    jspb.Message.getWrapperField(this, proto.proto.ResponsePath, 2));
};


/**
 * @param {?proto.proto.ResponsePath|undefined} value
 * @return {!proto.proto.StreamInfo} returns this
*/
proto.proto.StreamInfo.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamInfo} returns this
 */
proto.proto.StreamInfo.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamInfo.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypeRef returnType = 3;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.StreamInfo.prototype.getReturntype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 3));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.StreamInfo} returns this
*/
proto.proto.StreamInfo.prototype.setReturntype = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamInfo} returns this
 */
proto.proto.StreamInfo.prototype.clearReturntype = function() {
  return this.setReturntype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamInfo.prototype.hasReturntype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeRef parentType = 4;
 * @return {?proto.proto.TypeRef}
 */
proto.proto.StreamInfo.prototype.getParenttype = function() {
  return /** @type{?proto.proto.TypeRef} */ (
    jspb.Message.getWrapperField(this, proto.proto.TypeRef, 4));
};


/**
 * @param {?proto.proto.TypeRef|undefined} value
 * @return {!proto.proto.StreamInfo} returns this
*/
proto.proto.StreamInfo.prototype.setParenttype = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamInfo} returns this
 */
proto.proto.StreamInfo.prototype.clearParenttype = function() {
  return this.setParenttype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamInfo.prototype.hasParenttype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OperationDefinition operation = 5;
 * @return {?proto.proto.OperationDefinition}
 */
proto.proto.StreamInfo.prototype.getOperation = function() {
  return /** @type{?proto.proto.OperationDefinition} */ (
    jspb.Message.getWrapperField(this, proto.proto.OperationDefinition, 5));
};


/**
 * @param {?proto.proto.OperationDefinition|undefined} value
 * @return {!proto.proto.StreamInfo} returns this
*/
proto.proto.StreamInfo.prototype.setOperation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamInfo} returns this
 */
proto.proto.StreamInfo.prototype.clearOperation = function() {
  return this.setOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamInfo.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, Value> variableValues = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.StreamInfo.prototype.getVariablevaluesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.StreamInfo} returns this
 */
proto.proto.StreamInfo.prototype.clearVariablevaluesMap = function() {
  this.getVariablevaluesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f),
    argumentsMap: (f = msg.getArgumentsMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : [],
    info: (f = msg.getInfo()) && proto.proto.StreamInfo.toObject(includeInstance, f),
    secretsMap: (f = msg.getSecretsMap()) ? f.toObject(includeInstance, undefined) : [],
    protocol: (f = msg.getProtocol()) && proto.proto.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StreamRequest}
 */
proto.proto.StreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StreamRequest;
  return proto.proto.StreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StreamRequest}
 */
proto.proto.StreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = msg.getArgumentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    case 3:
      var value = new proto.proto.StreamInfo;
      reader.readMessage(value,proto.proto.StreamInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 4:
      var value = msg.getSecretsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
  f = message.getArgumentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.StreamInfo.serializeBinaryToWriter
    );
  }
  f = message.getSecretsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.proto.Function}
 */
proto.proto.StreamRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 1));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.StreamRequest} returns this
*/
proto.proto.StreamRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamRequest} returns this
 */
proto.proto.StreamRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, Value> arguments = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.StreamRequest.prototype.getArgumentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.StreamRequest} returns this
 */
proto.proto.StreamRequest.prototype.clearArgumentsMap = function() {
  this.getArgumentsMap().clear();
  return this;};


/**
 * optional StreamInfo info = 3;
 * @return {?proto.proto.StreamInfo}
 */
proto.proto.StreamRequest.prototype.getInfo = function() {
  return /** @type{?proto.proto.StreamInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.StreamInfo, 3));
};


/**
 * @param {?proto.proto.StreamInfo|undefined} value
 * @return {!proto.proto.StreamRequest} returns this
*/
proto.proto.StreamRequest.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamRequest} returns this
 */
proto.proto.StreamRequest.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamRequest.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> secrets = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.StreamRequest.prototype.getSecretsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.StreamRequest} returns this
 */
proto.proto.StreamRequest.prototype.clearSecretsMap = function() {
  this.getSecretsMap().clear();
  return this;};


/**
 * optional Value protocol = 5;
 * @return {?proto.proto.Value}
 */
proto.proto.StreamRequest.prototype.getProtocol = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 5));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.StreamRequest} returns this
*/
proto.proto.StreamRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamRequest} returns this
 */
proto.proto.StreamRequest.prototype.clearProtocol = function() {
  return this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.proto.Value.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StreamMessage}
 */
proto.proto.StreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StreamMessage;
  return proto.proto.StreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StreamMessage}
 */
proto.proto.StreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value response = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.StreamMessage.prototype.getResponse = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.StreamMessage} returns this
*/
proto.proto.StreamMessage.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamMessage} returns this
 */
proto.proto.StreamMessage.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.StreamMessage.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.StreamMessage} returns this
*/
proto.proto.StreamMessage.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.StreamMessage} returns this
 */
proto.proto.StreamMessage.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StreamMessage.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ByteStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ByteStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ByteStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ByteStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ByteStreamRequest}
 */
proto.proto.ByteStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ByteStreamRequest;
  return proto.proto.ByteStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ByteStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ByteStreamRequest}
 */
proto.proto.ByteStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ByteStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ByteStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ByteStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ByteStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ByteStream.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ByteStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ByteStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ByteStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ByteStream}
 */
proto.proto.ByteStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ByteStream;
  return proto.proto.ByteStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ByteStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ByteStream}
 */
proto.proto.ByteStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ByteStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ByteStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ByteStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ByteStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ByteStream.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.ByteStream.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.ByteStream.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ByteStream} returns this
 */
proto.proto.ByteStream.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SubscriptionConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SubscriptionConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SubscriptionConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variablevaluesMap: (f = msg.getVariablevaluesMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : [],
    operationname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    protocol: (f = msg.getProtocol()) && proto.proto.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SubscriptionConnectionRequest}
 */
proto.proto.SubscriptionConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SubscriptionConnectionRequest;
  return proto.proto.SubscriptionConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SubscriptionConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SubscriptionConnectionRequest}
 */
proto.proto.SubscriptionConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = msg.getVariablevaluesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationname(value);
      break;
    case 5:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SubscriptionConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SubscriptionConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SubscriptionConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVariablevaluesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
  f = message.getOperationname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.proto.Function}
 */
proto.proto.SubscriptionConnectionRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 1));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
*/
proto.proto.SubscriptionConnectionRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
 */
proto.proto.SubscriptionConnectionRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SubscriptionConnectionRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.proto.SubscriptionConnectionRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
 */
proto.proto.SubscriptionConnectionRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, Value> variableValues = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.SubscriptionConnectionRequest.prototype.getVariablevaluesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
 */
proto.proto.SubscriptionConnectionRequest.prototype.clearVariablevaluesMap = function() {
  this.getVariablevaluesMap().clear();
  return this;};


/**
 * optional string operationName = 4;
 * @return {string}
 */
proto.proto.SubscriptionConnectionRequest.prototype.getOperationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
 */
proto.proto.SubscriptionConnectionRequest.prototype.setOperationname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Value protocol = 5;
 * @return {?proto.proto.Value}
 */
proto.proto.SubscriptionConnectionRequest.prototype.getProtocol = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 5));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
*/
proto.proto.SubscriptionConnectionRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SubscriptionConnectionRequest} returns this
 */
proto.proto.SubscriptionConnectionRequest.prototype.clearProtocol = function() {
  return this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SubscriptionConnectionRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SubscriptionConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SubscriptionConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SubscriptionConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.proto.Value.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SubscriptionConnectionResponse}
 */
proto.proto.SubscriptionConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SubscriptionConnectionResponse;
  return proto.proto.SubscriptionConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SubscriptionConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SubscriptionConnectionResponse}
 */
proto.proto.SubscriptionConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.proto.Error;
      reader.readMessage(value,proto.proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SubscriptionConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SubscriptionConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SubscriptionConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value response = 1;
 * @return {?proto.proto.Value}
 */
proto.proto.SubscriptionConnectionResponse.prototype.getResponse = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 1));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.SubscriptionConnectionResponse} returns this
*/
proto.proto.SubscriptionConnectionResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SubscriptionConnectionResponse} returns this
 */
proto.proto.SubscriptionConnectionResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SubscriptionConnectionResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.proto.Error}
 */
proto.proto.SubscriptionConnectionResponse.prototype.getError = function() {
  return /** @type{?proto.proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.proto.Error, 2));
};


/**
 * @param {?proto.proto.Error|undefined} value
 * @return {!proto.proto.SubscriptionConnectionResponse} returns this
*/
proto.proto.SubscriptionConnectionResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SubscriptionConnectionResponse} returns this
 */
proto.proto.SubscriptionConnectionResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SubscriptionConnectionResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SubscriptionListenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SubscriptionListenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SubscriptionListenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionListenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.proto.Function.toObject(includeInstance, f),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variablevaluesMap: (f = msg.getVariablevaluesMap()) ? f.toObject(includeInstance, proto.proto.Value.toObject) : [],
    operationname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    protocol: (f = msg.getProtocol()) && proto.proto.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SubscriptionListenRequest}
 */
proto.proto.SubscriptionListenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SubscriptionListenRequest;
  return proto.proto.SubscriptionListenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SubscriptionListenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SubscriptionListenRequest}
 */
proto.proto.SubscriptionListenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Function;
      reader.readMessage(value,proto.proto.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = msg.getVariablevaluesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Value.deserializeBinaryFromReader, "", new proto.proto.Value());
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationname(value);
      break;
    case 5:
      var value = new proto.proto.Value;
      reader.readMessage(value,proto.proto.Value.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SubscriptionListenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SubscriptionListenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SubscriptionListenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionListenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Function.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVariablevaluesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Value.serializeBinaryToWriter);
  }
  f = message.getOperationname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.proto.Function}
 */
proto.proto.SubscriptionListenRequest.prototype.getFunction = function() {
  return /** @type{?proto.proto.Function} */ (
    jspb.Message.getWrapperField(this, proto.proto.Function, 1));
};


/**
 * @param {?proto.proto.Function|undefined} value
 * @return {!proto.proto.SubscriptionListenRequest} returns this
*/
proto.proto.SubscriptionListenRequest.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SubscriptionListenRequest} returns this
 */
proto.proto.SubscriptionListenRequest.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SubscriptionListenRequest.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.proto.SubscriptionListenRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SubscriptionListenRequest} returns this
 */
proto.proto.SubscriptionListenRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, Value> variableValues = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Value>}
 */
proto.proto.SubscriptionListenRequest.prototype.getVariablevaluesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Value>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.proto.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.SubscriptionListenRequest} returns this
 */
proto.proto.SubscriptionListenRequest.prototype.clearVariablevaluesMap = function() {
  this.getVariablevaluesMap().clear();
  return this;};


/**
 * optional string operationName = 4;
 * @return {string}
 */
proto.proto.SubscriptionListenRequest.prototype.getOperationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SubscriptionListenRequest} returns this
 */
proto.proto.SubscriptionListenRequest.prototype.setOperationname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Value protocol = 5;
 * @return {?proto.proto.Value}
 */
proto.proto.SubscriptionListenRequest.prototype.getProtocol = function() {
  return /** @type{?proto.proto.Value} */ (
    jspb.Message.getWrapperField(this, proto.proto.Value, 5));
};


/**
 * @param {?proto.proto.Value|undefined} value
 * @return {!proto.proto.SubscriptionListenRequest} returns this
*/
proto.proto.SubscriptionListenRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SubscriptionListenRequest} returns this
 */
proto.proto.SubscriptionListenRequest.prototype.clearProtocol = function() {
  return this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SubscriptionListenRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SubscriptionListenMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SubscriptionListenMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SubscriptionListenMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionListenMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SubscriptionListenMessage}
 */
proto.proto.SubscriptionListenMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SubscriptionListenMessage;
  return proto.proto.SubscriptionListenMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SubscriptionListenMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SubscriptionListenMessage}
 */
proto.proto.SubscriptionListenMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SubscriptionListenMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SubscriptionListenMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SubscriptionListenMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscriptionListenMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNext();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool next = 1;
 * @return {boolean}
 */
proto.proto.SubscriptionListenMessage.prototype.getNext = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.SubscriptionListenMessage} returns this
 */
proto.proto.SubscriptionListenMessage.prototype.setNext = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.proto);
